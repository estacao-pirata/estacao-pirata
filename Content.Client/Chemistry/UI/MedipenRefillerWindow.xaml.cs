using System.Linq;
using System.Text;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using FastAccessors;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Chemistry.UI
{

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRefillerWindow : FancyWindow
    {
        [Dependency] private IEntitySystemManager _entityManager = default!;
        [Dependency] private IPrototypeManager _prototypeManager = default!;

        private readonly SpriteSystem _spriteSystem;


        public IEnumerable<MedipenRecipePrototype>? MedipenRecipes;

        public MedipenRefillerWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _spriteSystem = _entityManager.GetEntitySystem<SpriteSystem>();
        }

        public void UpdateRecipes()
        {
            MedipenList.RemoveAllChildren();
            foreach (var recipe in MedipenRecipes!)
            {
                if (!_prototypeManager.TryIndex<EntityPrototype>(recipe.ID, out var medipenProto))
                    continue;

                StringBuilder tooltip = new();
                tooltip.AppendLine(medipenProto.Description);
                foreach (var reagent in recipe.ReagentsRequired)
                {
                    if (!_prototypeManager.TryIndex<ReagentPrototype>(reagent.Key, out var reagentProto))
                        continue;

                    tooltip.Append("\n");
                    tooltip.Append(Loc.GetString("medipen-menu-tooltip-display", ("amount", reagent.Value), ("reagent", reagentProto.LocalizedName)));
                }
                Control control = new MedipenRecipeControl(medipenProto, true, tooltip.ToString(), _spriteSystem.Frame0(medipenProto));
                MedipenList.AddChild(control);
            }
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRecipeControl : Control
    {
        public Action<string>? OnButtonPressed;
        public string TooltipText;

        public MedipenRecipeControl(EntityPrototype medipen, bool canProduce, string tooltip, Texture texture)
        {
            RobustXamlLoader.Load(this);


            RecipeName.Text = medipen.Name;
            RecipeTexture.Texture = texture;
            Button.Disabled = !canProduce;
            TooltipText = tooltip;
            Button.TooltipSupplier = SupplyTooltip;

            Button.OnPressed += (_) =>
            {
                OnButtonPressed?.Invoke(medipen.ID);
            };
        }
        private Control? SupplyTooltip(Control sender)
        {
            return new MedipenRecipeTooltip(TooltipText);
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRecipeTooltip : Control
    {
        public MedipenRecipeTooltip(string tooltip)
        {
            RobustXamlLoader.Load(this);

            RecipeTooltipLabel.SetMessage(tooltip);
        }
    }
}
