using System.Linq;
using System.Text;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Content.Shared.GameTicking;
using FastAccessors;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Chemistry.UI
{

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRefillerWindow : FancyWindow
    {
        [Dependency] private IEntitySystemManager _entityManager = default!;
        [Dependency] private IPrototypeManager _prototypeManager = default!;

        private readonly SpriteSystem _spriteSystem;


        public IEnumerable<MedipenRecipePrototype>? MedipenRecipes;

        public ContainerData? InputContainerData;
        public ContainerData? BufferData;

        public MedipenRefillerWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _spriteSystem = _entityManager.GetEntitySystem<SpriteSystem>();
        }

        public void UpdateRecipes()
        {
            MedipenList.RemoveAllChildren();
            foreach (var recipe in MedipenRecipes!)
            {
                if (!_prototypeManager.TryIndex<EntityPrototype>(recipe.ID, out var medipenProto))
                    continue;

                StringBuilder tooltip = new();
                tooltip.AppendLine(medipenProto.Description);
                foreach (var reagent in recipe.ReagentsRequired)
                {
                    if (!_prototypeManager.TryIndex<ReagentPrototype>(reagent.Key, out var reagentProto))
                        continue;

                    tooltip.Append("\n");
                    tooltip.Append(Loc.GetString("medipen-refiller-window-tooltip-display", ("amount", reagent.Value), ("reagent", reagentProto.LocalizedName)));
                }
                Control control = new MedipenRecipeControl(medipenProto, true, tooltip.ToString(), _spriteSystem.Frame0(medipenProto));
                MedipenList.AddChild(control);
            }
        }

        public void UpdateContainerInfo()
        {
            InputContainerInfo.RemoveAllChildren();
            BufferInfo.RemoveAllChildren();

            if (!InputContainerData!.HasContainer)
            {
                InputContainerInfo.AddChild(new LabelBuilder(Loc.GetString("medipen-refiller-window-no-container-loaded-text")));
            }
            else
            {
                Label displayName = new LabelBuilder(Loc.GetString("medipen-refiller-window-container-name", ("name", InputContainerData.Name)));
                Label displayVolume = new LabelBuilder(Loc.GetString("medipen-refiller-window-container-volume",
                ("amount", InputContainerData.CurrentVolume),
                ("volume", InputContainerData.TotalVolume)));
                displayVolume.AddStyleClass(StyleNano.StyleClassLabelSecondaryColor);
                displayName.Margin = new Thickness(1);
                displayVolume.Margin = new Thickness(1, 1, 1, 10);
                InputContainerInfo.AddChild(displayName);
                InputContainerInfo.AddChild(displayVolume);
                foreach (var reagent in InputContainerData.ReagentQuantities)
                {
                    if (_prototypeManager.TryIndex<ReagentPrototype>(reagent.Reagent.Prototype, out var reagentProto))
                        InputContainerInfo.AddChild(new MedipenRefillerReagentControl(reagentProto, reagent.Quantity, false));
                }
            }
        }
    }

    public sealed partial class LabelBuilder : Label
    {
        public LabelBuilder(string text)
        {
            Text = text;
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRecipeControl : Control
    {
        public Action<string>? OnButtonPressed;
        public string TooltipText;

        public MedipenRecipeControl(EntityPrototype medipen, bool canProduce, string tooltip, Texture texture)
        {
            RobustXamlLoader.Load(this);


            RecipeName.Text = medipen.Name;
            RecipeTexture.Texture = texture;
            Button.Disabled = !canProduce;
            TooltipText = tooltip;
            Button.TooltipSupplier = SupplyTooltip;

            Button.OnPressed += (_) =>
            {
                OnButtonPressed?.Invoke(medipen.ID);
            };
        }
        private Control? SupplyTooltip(Control sender)
        {
            return new MedipenRecipeTooltip(TooltipText);
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRecipeTooltip : Control
    {
        public MedipenRecipeTooltip(string tooltip)
        {
            RobustXamlLoader.Load(this);

            RecipeTooltipLabel.SetMessage(tooltip);
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRefillerReagentControl : Control
    {
        public bool IsBuffer { get; set; }
        public ReagentPrototype Reagent { get; set; }
        public MedipenRefillerReagentControl(ReagentPrototype reagent, FixedPoint2 amount, bool isBuffer)
        {
            RobustXamlLoader.Load(this);

            Reagent = reagent;
            ReagentName.Text = Loc.GetString("medipen-refiller-window-reagent-name", ("name", reagent.LocalizedName));
            ReagentAmount.Text = Loc.GetString("medipen-refiller-window-reagent-amount", ("amount", amount.ToString()));
            IsBuffer = isBuffer;
        }
    }
}
