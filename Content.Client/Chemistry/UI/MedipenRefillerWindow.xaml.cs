using System.Linq;
using System.Security.Cryptography;
using System.Text;
using Content.Client.Lathe.UI;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Anomaly;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Content.Shared.GameTicking;
using FastAccessors;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Chemistry.UI
{

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRefillerWindow : FancyWindow
    {
        [Dependency] private IEntitySystemManager _entityManager = default!;
        [Dependency] private IPrototypeManager _prototypeManager = default!;

        public event Action<TransferButton>? OnTransferButtonPressed;
        public event Action<string>? OnMedipenButtonPressed;

        private readonly SpriteSystem _spriteSystem;

        public List<MedipenRecipePrototype>? MedipenRecipes;
        public ContainerData? InputContainerData;
        public ContainerData? BufferData;

        public MedipenRefillerWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _spriteSystem = _entityManager.GetEntitySystem<SpriteSystem>();
        }

        public void UpdateRecipes()
        {
            MedipenList.RemoveAllChildren();
            foreach (var recipe in MedipenRecipes!)
            {
                if (!_prototypeManager.TryIndex<EntityPrototype>(recipe.ID, out var medipenProto))
                    continue;

                StringBuilder tooltip = new();
                tooltip.AppendLine(medipenProto.Description);
                foreach (var reagent in recipe.ReagentsRequired)
                {
                    if (!_prototypeManager.TryIndex<ReagentPrototype>(reagent.Key, out var reagentProto))
                        continue;

                    tooltip.Append("\n");
                    tooltip.Append(Loc.GetString("medipen-refiller-window-tooltip-display", ("amount", reagent.Value), ("reagent", reagentProto.LocalizedName)));
                }
                var control = new MedipenRecipeControl(medipenProto, CanRefill(medipenProto.ID), tooltip.ToString(), _spriteSystem.Frame0(medipenProto));
                control.OnMedipenButtonPressed += args => OnMedipenButtonPressed?.Invoke(args);
                MedipenList.AddChild(control);
            }
        }

        public void UpdateContainerInfo()
        {
            InputContainerInfo.RemoveAllChildren();
            BufferInfo.RemoveAllChildren();

            if (InputContainerData!.HasContainer)
            {
                InputContainerInfo.AddChild(new ContainerDisplayControl(InputContainerData.Name!,
                                                                        InputContainerData.CurrentVolume.ToString(),
                                                                        InputContainerData.TotalVolume.ToString()));
            }
            else
            {
                Label label = new Label
                {
                    Text = Loc.GetString("medipen-refiller-window-no-container-loaded-text")
                };
                InputContainerInfo.AddChild(label);
            }

            if (BufferData!.HasContainer)
            {
                BufferInfo.AddChild(new ContainerDisplayControl(BufferData.Name!,
                                                                BufferData.CurrentVolume.ToString(),
                                                                BufferData.TotalVolume.ToString()));
            }
            else
            {
                Label label = new Label
                {
                    Text = Loc.GetString("medipen-refiller-window-no-medipen-loaded-text")
                };
                BufferInfo.AddChild(label);
            }

            foreach (var reagent in InputContainerData.ReagentQuantities)
            {
                if (_prototypeManager.TryIndex<ReagentPrototype>(reagent.Reagent.Prototype, out var reagentProto))
                {
                    var control = new MedipenRefillerReagentControl(reagent.Reagent, reagentProto.LocalizedName, reagent.Quantity, false);
                    control.OnTransferButtonPressed += args => OnTransferButtonPressed?.Invoke(args);
                    InputContainerInfo.AddChild(control);
                }
            }

            foreach (var reagent in BufferData.ReagentQuantities)
            {
                if (_prototypeManager.TryIndex<ReagentPrototype>(reagent.Reagent.Prototype, out var reagentProto))
                {
                    var control = new MedipenRefillerReagentControl(reagent.Reagent, reagentProto.LocalizedName, reagent.Quantity, true);
                    control.OnTransferButtonPressed += args => OnTransferButtonPressed?.Invoke(args);
                    BufferInfo.AddChild(control);
                }
            }
        }

        private bool CanRefill(string id)
        {
            var reagents = new Dictionary<string, FixedPoint2>();
            var requiredReagents = new Dictionary<string, FixedPoint2>();

            foreach (var recipe in MedipenRecipes!)
            {
                if (recipe.ID.Equals(id))
                {
                    requiredReagents = recipe.ReagentsRequired;
                    foreach (var reagent in BufferData!.ReagentQuantities)
                    {
                        if (_prototypeManager.TryIndex<ReagentPrototype>(reagent.Reagent.Prototype, out var reagentProto))
                            reagents.Add(reagentProto.ID, reagent.Quantity);
                    }
                }
            }

            if (reagents.Count.Equals(requiredReagents.Count))
            {
                foreach (var reagent in reagents)
                {
                    if (!(requiredReagents.ContainsKey(reagent.Key) && requiredReagents[reagent.Key].Equals(reagent.Value)))
                        return false;
                }
                return true;
            }
            else
                return false;
        }

    }

    public sealed partial class ContainerDisplayControl : Control
    {
        public Label ContainerName = new();
        public Label ReagentAmount = new();
        public BoxContainer ContainerDisplay = new BoxContainer();
        public ContainerDisplayControl(string name, string currentVolume, string totalVolume)
        {
            ContainerName.Text = Loc.GetString("medipen-refiller-window-container-name", ("name", name));
            ReagentAmount.Text = Loc.GetString("medipen-refiller-window-container-volume", ("amount", currentVolume), ("volume", totalVolume));
            ReagentAmount.Margin = new Thickness(5, 0, 0, 0);
            ReagentAmount.AddStyleClass(StyleNano.StyleClassLabelSecondaryColor);
            ContainerDisplay.AddChild(ContainerName);
            ContainerDisplay.AddChild(ReagentAmount);
            AddChild(ContainerDisplay);
            Margin = new Thickness(2, 0, 0, 10);
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRecipeControl : Control
    {
        public Action<string>? OnMedipenButtonPressed;

        public string TooltipText;

        public MedipenRecipeControl(EntityPrototype medipen, bool canProduce, string tooltip, Texture texture)
        {
            RobustXamlLoader.Load(this);


            RecipeName.Text = medipen.Name;
            RecipeTexture.Texture = texture;
            Button.Disabled = !canProduce;
            TooltipText = tooltip;
            Button.TooltipSupplier = SupplyTooltip;

            Button.OnPressed += (_) =>
            {
                OnMedipenButtonPressed?.Invoke(medipen.ID);
            };
        }
        private Control? SupplyTooltip(Control sender)
        {
            return new MedipenRecipeTooltip(TooltipText);
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRecipeTooltip : Control
    {
        public MedipenRecipeTooltip(string tooltip)
        {
            RobustXamlLoader.Load(this);

            RecipeTooltipLabel.SetMessage(tooltip);
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class MedipenRefillerReagentControl : Control
    {
        public Action<TransferButton>? OnTransferButtonPressed;

        public MedipenRefillerReagentControl(ReagentId reagent, string name, FixedPoint2 amount, bool isBuffer)
        {
            RobustXamlLoader.Load(this);

            ReagentName.Text = Loc.GetString("medipen-refiller-window-reagent-name", ("name", name));
            ReagentAmount.Text = Loc.GetString("medipen-refiller-window-reagent-amount", ("amount", amount.ToString()));
            ReagentBoxContainer.AddChild(GenerateButton(reagent, "TransferButton01", "01", 1, isBuffer, StyleBase.ButtonOpenRight));
            ReagentBoxContainer.AddChild(GenerateButton(reagent, "TransferButton05", "05", 5, isBuffer, StyleBase.ButtonOpenBoth));
            ReagentBoxContainer.AddChild(GenerateButton(reagent, "TransferButton10", "10", 10, isBuffer, StyleBase.ButtonOpenBoth));
            ReagentBoxContainer.AddChild(GenerateButton(reagent, "TransferButton15", "15", 15, isBuffer, StyleBase.ButtonOpenBoth));
            ReagentBoxContainer.AddChild(GenerateButton(reagent, "TransferButton20", "20", 20, isBuffer, StyleBase.ButtonOpenLeft));
        }

        private TransferButton GenerateButton(ReagentId id, string name, string text, FixedPoint2 value, bool isBuffer, string style)
        {
            TransferButton button = new TransferButton(id, name, text, value, isBuffer, style);
            button.OnPressed += _ => OnTransferButtonPressed?.Invoke(button);
            return button;
        }
    }

    public sealed partial class TransferButton : Button
    {
        public ReagentId Id;
        public FixedPoint2 Value;
        public bool IsBuffer;

        public TransferButton(ReagentId id, string name, string text, FixedPoint2 value, bool isBuffer, string style)
        {
            Id = id;
            Name = name;
            Text = text;
            Value = value;
            IsBuffer = isBuffer;
            AddStyleClass(style);
        }
    }
}
